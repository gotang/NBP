sqlite官网：https://www.sqlite.org/

1 c/c++编程接口
---------------------------------------------------------------------------------------------------
https://www.sqlite.org/cintro.html  （简要介绍c/c++编程接口）
http://www.tutorialspoint.com/sqlite/sqlite_c_cpp.htm （有简单例子可供参考）


以下2个对象和8个方法组成了sqlite编程核心接口

sqlite3	   	        // 表示sqlite3连接对象，通过sqlite3_open()创建，sqlite3_close()析构
sqlite3_stmt        // 表示SQL语句对象. 通过sqlite3_prepare()创建， sqlite3_finalize()析构

sqlite3_open()		// 打开或创建数据库（如果不存在）
sqlite3_prepare()   // 编译SQL语句(相当于sqlite3_stmt的构造函数)
sqlite3_bind()		// 绑定SQL语句的参数
sqlite3_step()		// 执行SQL语句，调用sqlite3_step()一次只返回一行结果
sqlite3_column()	// 获取当前结果行（获取行中每column或字段的值）
sqlite3_finalize()	// 析构qlite3_stmt
sqlite3_close()		// 析构sqlite3
sqlite3_exec()		// 封装sqlite3_prepare(), sqlite3_step(), sqlite3_column()和sqlite3_finalize()

注：
1) 以上函数可能有多个类似版本，如sqlite3_open()－文件名参数解析为UTF8, sqlite3_open16()－文件名参数解析为UTF16, sqlite3_open_v2()－新版本
2）sqlite3_column()不是一个真正的函数，它只是一个占位符，表示如下一系列函数：
sqlite3_column_blob()
sqlite3_column_bytes()
sqlite3_column_bytes16()
sqlite3_column_count()
sqlite3_column_double()
sqlite3_column_int()
sqlite3_column_int64()
sqlite3_column_text()
sqlite3_column_text16()
sqlite3_column_type()
sqlite3_column_value()


2. 编程示例
---------------------------------------------------------------------------------------------------
// 执行SQL语句的回调，每一行结果回调一次
// 返回非0值使得sqlite3_exec()返回SQLITE_ABOR，并且不会再调用此回调函数，不会再执行后续的任何SQL语句
// cols表示字段数, colVaues[i]表示第i个字段的值(如果不为NULL), colNames[i]表示第i个字段的名字
static int callback(void* custom, int cols, char** colValues, char** colNames) {
    for (int i=0; i < cols; i++) {
        cout << colNames[i] << "=" << (colValues[i] ? colValues[i] : "null") << endl;   
    }
    return 0;
}


int main(int argc, char** argv) {
    if (argc != 3) {
        cerr << "usage: " << argv[0] << " <db-file> <sql-commands>" << endl;
        return -1;
    }

    // 创建或打开sqlite3数据库文件
    sqlite3* db = NULL;
    if (SQLITE_OK != sqlite3_open(argv[1], &db)) {
        cerr << sqlite3_errmsg(db) << endl;
        sqlite3_close(db);
        return -1;
    }  

    // 执行SQL语句
    char* errmsg = NULL;
    if (SQLITE_OK != sqlite3_exec(db, argv[2], callback, NULL, &errmsg)) {
        sqlite3_free(errmsg);
    }

    // 析构sqlite3
    sqlite3_close(db);
    return 0;
}

3 sqlite命令（名称：sqlite3，windows下为sqlite3.exe）
---------------------------------------------------------------------------------------------------
$ sqlite3                                       // 不指定文件名，则创建一个临时数据库,　sqlite3退出时删除
$ sqlite3 test.db                               // 如果指定的test.db不存在，则创建（注，sqlite3也可不接）
SQLite version 3.8.2 2013-12-06 14:53:30
Enter ".help" for instructions                  // 键入.help获取帮助（注，以.开头的为sqlite3内部命令）
Enter SQL statements terminated with a ";"      //　以";"分隔的为sql语句命令
sqlite> select * from person;                   // 执行select语句
1|hao
2|kun
3|a
4|a
5|x
sqlite> .quit                                   // 退出, 或键入End-Of-File符Ctrl+D结束sqlite3（注：键入Ctrl+D终止SQL语句执行）



4. sqlite3数据类型
---------------------------------------------------------------------------------------------------
传统数据库大多使用静态数据类型，sqlite3使用动态类型（但兼容传统静态类型），主要有以下５种：
NULL     表示NULL值.
INTEGER  有符号整数，可存为1, 2, 3, 4, 6, 8字节（取决于值的大小） 
REAL     浮点数（8字节IEEE浮点数）
TEXT     字符串(UTF-8, UTF-16BE或UTF-16LE).
BLOB     二进制数据？
注：
1) Boolean用INTEGER表示：　0(false), 1(true)
2) Date和Time可用TEXT, REAL和INTEGER表示
   TEXT: ISO8601字符串("YYYY-MM-DD HH:MM:SS.SSS").
　　　REAL: Julian day numbers, the number of days since noon in Greenwich on November 24, 4714 B.C. according to the proleptic Gregorian calendar.
　　　INTEGER: 自1970-01-01 00:00:00 UTC的秒数.

类型的亲缘性（Type Affinity), 共５种，每个字段被赋予一种亲缘性
TEXT        可存为NULL, TEXT or BLOB.　(如果插入数字，则插入之前后转换)
NUMERIC     可存为５种中的任一种类型，插入TEXT时, 如果不损失精度,可转为INTEGER或REAL，否则转换为TEXT
INTEGER     类似NUMERIC（除类型转换：https://www.sqlite.org/lang_expr.html#castexpr）
REAL        类似NUMERIC（强制整数为浮点表示）
BLOB        

字段亲缘性规则？
1) 如果类型包括"INT", 则为INTEGER
2) 如果类型中包括"CHAR", "CLOB", 或"TEXT"，　则为TEXT. (注：VARCHAR包含CHAR, 故其亲缘性为TEXT) 
3) 如果类型中包括 "BLOB" 或示指定类型，　则为BLOB
4) 如果类型中包括"REAL", "FLOA", 或，　则为REAL
5) 否则为NUMERIC.

类型的亲缘性举例：
INTEGER亲缘，应用规则1
INT
INTEGER 
TINYINT
SMALLINT
MEDIUMINT
BIGINT
UNSIGNED BIG INT
INT2
INT8	

TEXT亲缘性，应用规则2
CHARACTER(20)
VARCHAR(255)
VARYING CHARACTER(255)
NCHAR(55)
NATIVE CHARACTER(70)
NVARCHAR(100)
TEXT
CLOB

BLOB亲缘性，应用规则3
BLOB
no datatype specified

REAL亲缘性，应用规则4
REAL
DOUBLE
DOUBLE PRECISION
FLOAT

NUMERIC亲缘性，应用规则5
NUMERIC
DECIMAL(10,5)
BOOLEAN
DATE
DATETIME














