Regular Expression 
------------------------------------------------------------


1 特殊字符

. 	匹配除换行符之外的任意字符
\w	匹配单词字符（字母或数字或下划线）（相当于[A-Za-z0-9_]）
\s	匹配任意的空白符（制表符、空格、换行符）
\d	匹配任意的数字
\l  匹配小写字母
\u  匹配大写字母
\b	匹配单词的开始或结束（即由单词字符变为非单词字符，或非单词字符变到单词字符）　
^	匹配行的开始（或字符串的开始处，具体依据选项设置）
$	匹配行的结束（或字符串的结束处，具体依据选项设置）
注：
\b（或^）（或$）只是匹配满足与否的前提条件，其本身不匹配任何字符，例如：
\babc\b可匹配％abc％中的abc，但\b本身不匹配任何字符


2 转义字符(\引用特殊字符本身）
\.	匹配.
\\	匹配\
\^	匹配^
\$  匹配$

3 重复
*		重复0次或多次
?		重复0次或1次
+		重复1次或多次
{n}		重复n次
{n,}	重复n次以上
{n, m}	重复n到m次

例如：
13\d{9}	匹配13后面跟9个数字
^\w+	匹配行的第1个单词（或字符串的第1个单词，具体代表哪个看选项设置）
注：贪婪模式 vs 非贪婪模式
缺省情况下为贪婪匹配（尽可能多地匹配），非贪婪匹配需加?符
例如: 
(a+).* 匹配aardvark 第一个子匹配为aa
(a+?).*匹配aardvark 第一个子匹配为a

4 字符
[ad]	匹配字符a, d
[a-d]	匹配字符a, b, c, d
[.?!]	匹配.,?, !
注：方框号中特殊字符不会解释成其它含意，例如写成[\.\?!]会报错，因为出现了两个\

5 反义
\W		匹配不是字母或数字的字符
\S		匹配不是空白符（制表符、空格、换行符）
\D		匹配非数字
\L 		匹配非小写字母
\U  	匹配非大写字母
\B		匹配不是单词的开始或结束的位置
[^x]	匹配除x之外的任意字符
[^a-d]	匹配除a-d之外的任意字符

例如：
\S+			匹配不含空白符的字符串
<a[^>]+>	匹配尖括号括起来的以a开头的字符串

6 替换（|）
\d{5}-\d{4}|\d{5}	匹配用连字号连接的前面是5位数后面是4位数字，或5位数字的字符串
注：使用替换时，顺序很重要，匹配时从左到右测试每个条件,如\d{5}|\d{5}-\d{4}只匹配5位数字:)

7 子模式（使用小括号）
(\d{1,3}\.){3}\d{1,3} 可匹配以.分隔的4个数字，如IP地址

------------------------------------------------------------
参考： 
C++程序设计原理与实践
http://manual.phpv.net/regular_expression.htm                                                                         
